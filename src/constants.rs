use bevy::math::Vec2;

pub const TILE_SIZE: f32 = 16.;

pub const SCALE: f32 = 4.;
pub const SCREEN_SIZE_X: f32 = TILE_SIZE * 11.;
pub const SCREEN_SIZE_Y: f32 = TILE_SIZE * 13.;
pub const SCALED_SCREEN_SIZE_X: f32 = SCREEN_SIZE_X * SCALE;
pub const SCALED_SCREEN_SIZE_Y: f32 = SCREEN_SIZE_Y * SCALE;

pub const SELECTOR_BOUNDS_X_MIN: f32 = TILE_SIZE * 2.;
pub const SELECTOR_BOUNDS_X_MAX: f32 = TILE_SIZE * 9.;
pub const SELECTOR_BOUNDS_Y_MIN: f32 = TILE_SIZE * 3.;
pub const SELECTOR_BOUNDS_Y_MAX: f32 = TILE_SIZE * 10.;

pub const MOB_PATH: [Vec2; 11] = [
    Vec2::new(5. * 16. + 8., 9. * 16. + 8.),
    Vec2::new(8. * 16. + 8., 9. * 16. + 8.),
    Vec2::new(8. * 16. + 8., 2. * 16. + 8.),
    Vec2::new(2. * 16. + 8., 2. * 16. + 8.),
    Vec2::new(2. * 16. + 8., 4. * 16. + 8.),
    Vec2::new(5. * 16. + 8., 4. * 16. + 8.),
    Vec2::new(5. * 16. + 8., 7. * 16. + 8.),
    Vec2::new(2. * 16. + 8., 7. * 16. + 8.),
    Vec2::new(2. * 16. + 8., 9. * 16. + 8.),
    Vec2::new(3. * 16. + 8., 9. * 16. + 8.),
    Vec2::new(3. * 16. + 8., 10. * 16. + 8.),
];

pub const ALL_PATH_COORDINATES: [(f32, f32); 32] = [
    (5. * 16. + 8., 9. * 16. + 8.),
    (6. * 16. + 8., 9. * 16. + 8.),
    (7. * 16. + 8., 9. * 16. + 8.),
    (8. * 16. + 8., 9. * 16. + 8.),
    (8. * 16. + 8., 8. * 16. + 8.),
    (8. * 16. + 8., 7. * 16. + 8.),
    (8. * 16. + 8., 6. * 16. + 8.),
    (8. * 16. + 8., 5. * 16. + 8.),
    (8. * 16. + 8., 4. * 16. + 8.),
    (8. * 16. + 8., 3. * 16. + 8.),
    (8. * 16. + 8., 2. * 16. + 8.),
    (7. * 16. + 8., 2. * 16. + 8.),
    (6. * 16. + 8., 2. * 16. + 8.),
    (5. * 16. + 8., 2. * 16. + 8.),
    (4. * 16. + 8., 2. * 16. + 8.),
    (3. * 16. + 8., 2. * 16. + 8.),
    (2. * 16. + 8., 2. * 16. + 8.),
    (2. * 16. + 8., 3. * 16. + 8.),
    (2. * 16. + 8., 4. * 16. + 8.),
    (3. * 16. + 8., 4. * 16. + 8.),
    (4. * 16. + 8., 4. * 16. + 8.),
    (5. * 16. + 8., 4. * 16. + 8.),
    (5. * 16. + 8., 5. * 16. + 8.),
    (5. * 16. + 8., 6. * 16. + 8.),
    (5. * 16. + 8., 7. * 16. + 8.),
    (4. * 16. + 8., 7. * 16. + 8.),
    (3. * 16. + 8., 7. * 16. + 8.),
    (2. * 16. + 8., 7. * 16. + 8.),
    (2. * 16. + 8., 8. * 16. + 8.),
    (2. * 16. + 8., 9. * 16. + 8.),
    (3. * 16. + 8., 9. * 16. + 8.),
    (3. * 16. + 8., 10. * 16. + 8.),
];
